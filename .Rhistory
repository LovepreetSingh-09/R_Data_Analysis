x1 <- c("Dec", "Apr", "Jan", "Mar")
x2 <- c("Dec", "Apr", "Jam", "Mar")
sort(x1)
month_levels <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
y1 <- factor(x1, levels = month_levels)
y1
sort(y1)
y2 <- factor(x2, levels = month_levels)
y2
y2 <- parse_factor(x2, levels = month_levels)
library(tidyverse)
library(nycflights13)
y2 <- parse_factor(x2, levels = month_levels)
factor(x1)
y1
factor(x1)
# Levels generated by default are in ascending alphabetical order
factor(x1)
f1 <- factor(x1, levels = unique(x1))
f1
f1 <- factor(x1, fct_inorder(x1))
f1
f2 <- x1 %>% factor() %>% fct_inorder()
f2
levels(f2)
gss_cat
gss_cat %>%
count(race)
ggplot(gss_cat,aes(race)) %>%
geom_bar()
ggplot(gss_cat,aes(race)) +
geom_bar()
ggplot(gss_cat,aes(race)) +
geom_bar() + scale_x_discrete()
ggplot(gss_cat,aes(race)) +
geom_bar() + scale_x_discrete(drop=F)
relig=gss_cat %>%
group_by(relig) %>% summarize(age=mean(age,na.rm=T),tvhours=mean(tv_hours,na.rm=T),n=n())
relig=gss_cat %>%
group_by(relig) %>% summarize(age=mean(age,na.rm=T),tvhours=mean(tvhours,na.rm=T),n=n())
relig
ggplot(relig)+
geom_point(aes(tvhours,relig))
# fct_reorder to reorder the relig on the basis of tvhours
fct_reorder(relig, tvhours)
# fct_reorder to reorder the relig on the basis of tvhours
relig %>% fct_reorder(relig, tvhours)
# fct_reorder to reorder the relig on the basis of tvhours
relig %>% fct_reorder(relig, tvhours)
religon=gss_cat %>%
group_by(relig) %>% summarize(age=mean(age,na.rm=T),tvhours=mean(tvhours,na.rm=T),n=n())
# fct_reorder to reorder the relig on the basis of tvhours
religon %>% fct_reorder(relig, tvhours)
# fct_reorder to reorder the relig on the basis of tvhours
religon %>% fct_reorder(relig, tvhours)
religon=gss_cat %>%
group_by(relig) %>% summarize(age=mean(age,na.rm=T),tvhours=mean(tvhours,na.rm=T),n=n())
relig
religon
# fct_reorder to reorder the relig on the basis of tvhours
religon %>% fct_reorder(relig, tvhours)
ggplot(religon, aes(tvhours, fct_reorder(relig, tvhours))) +
geom_point()
# fct_reorder to reorder the relig on the basis of tvhours
fct_reorder(religion$relig, religon$tvhours)
# fct_reorder to reorder the relig on the basis of tvhours
fct_reorder(religon$relig, religon$tvhours)
relig %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(tvhours, relig)) +
geom_point()
mutate(relig = fct_reorder(relig, tvhours)
religon %>%
religon %>%
mutate(relig = fct_reorder(relig, tvhours))
religon %>%
mutate(relig = fct_reorder(relig, tvhours))
religon %>%
mutate(reli = fct_reorder(relig, tvhours))
religon %>%
mutate(relig = fct_reorder(relig, tvhours))
religon=gss_cat %>%
group_by(relig) %>% summarize(age=mean(age,na.rm=T),tvhours=mean(tvhours,na.rm=T),n=n())
religon
ggplot(religon)+
geom_point(aes(tvhours,relig))
levels(religon$relig)
# fct_reorder to reorder the relig on the basis of tvhours
fct_reorder(religon$relig, religon$tvhours)
religion$relig
religon$relig
rincome <- gss_cat %>%
group_by(rincome) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
rincome
ggplot(
rincome,
aes(age, fct_reorder(rincome, age))
) + geom_point()
+ geom_point()
rincome,
aes(age, fct_reorder(rincome, age))
ggplot(
ggplot( rincome,aes(age, fct_reorder(rincome, age)))
rincome
ggplot( rincome,aes(age, fct_reorder(rincome, age)))
rincome <- gss_cat %>%
group_by(rincome) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
rincome
ggplot( rincome,aes(age, fct_reorder(rincome, age)))
ggplot(
rincome,
aes(age, fct_reorder(rincome, age))
) + geom_point()
ggplot( rincome, aes(age, fct_reorder(rincome, age))) +
geom_point()
by_age <- gss_cat %>% filter(!is.na(age)) %>%
group_by(age, marital) %>% count() %>%
mutate(prop = n / sum(n))
by_age
gss_cat %>% filter(!is.na(age)) %>%count(n())
gss_cat %>% filter(!is.na(age)) %>%count(age)
gss_cat %>% filter(!is.na(age)) %>%count(martial)
gss_cat %>% filter(!is.na(age)) %>%count(marital)
by_age
by_age <- gss_cat %>% filter(!is.na(age)) %>%
group_by(age, marital) %>% count() %>%
mutate(prop = n / sum(n),sum=sum(n))
by_age
by_age <- gss_cat %>% filter(!is.na(age)) %>%
group_by(age, marital) %>% count() %>%
mutate(prop = n / sum(n))
by_age
ggplot(by_age, aes(age, prop, color = marital)) +
geom_line(na.rm = TRUE)
ggplot(by_age, aes(age, n, color = marital)) +
geom_line(na.rm = TRUE)
ggplot( by_age,aes(age, prop, color = fct_reorder2(marital, age, prop))) +
geom_line() +labs(color = "marital")
ggplot( by_age,aes(age, n, color = fct_reorder2(marital, age, prop))) +
geom_line() +labs(color = "marital")
# fct_reorder2() reorders the factor by the y values associated with the largest x values.
ggplot( by_age,aes(age, n, color = fct_reorder2(marital, age, n))) +
geom_line() +labs(color = "marital")
# fct_infreq() to order levels in increasing frequency
gss_cat %>%
mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
ggplot(aes(marital)) +
geom_bar()
# fct_infreq() to order levels in increasing frequency
gss_cat %>%
mutate(marital = marital %>% fct_infreq()) %>%
ggplot(aes(marital)) +
geom_bar()
gss_cat %>%
mutate(marital = marital %>% fct_infreq() %>% fct_rev())
gss_cat %>%
transmute(marital = marital %>% fct_infreq() %>% fct_rev())
gss_cat %>%
transmute(marital = marital %>% fct_infreq() %>% fct_rev()) %>% count()
gss_cat %>%
transmute(marital = marital %>% fct_infreq() %>% fct_rev()) %>% count(marital)
gss_cat %>%
transmute(marital = marital %>% fct_infreq() %>% fct_rev()) %>% count(marital) %>% marital
m=gss_cat %>%
transmute(marital = marital %>% fct_infreq() %>% fct_rev()) %>% count(marital)
print(m$marital)
gss_cat %>% count(partyid)
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat"
)) %>%
count(partyid)
# Modifying Values
gss_cat %>% count(partyid)
gss_cat %>% mutate(partyid = fct_recode(partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat" )) %>%
count(partyid)
# We can also combine groups or collapse using fct_recode
gss_cat %>% mutate(partyid = fct_recode(partyid,
"Republican, strong" = "Strong republican",
"Republican, weak" = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak" = "Not str democrat",
"Democrat, strong" = "Strong democrat",
"Other" = "No answer",
"Other" = "Don't know",
"Other" = "Other party")) %>%
count(partyid)
gss_cat %>%mutate(partyid = fct_collapse(partyid,
other = c("No answer", "Don't know", "Other party"),
rep = c("Strong republican", "Not str republican"),
ind = c("Ind,near rep", "Independent", "Ind,near dem"),
dem = c("Not str democrat", "Strong democrat"))) %>%
count(partyid)
# fct_lump combines or lump the all small groups together
gss_cat %>%
mutate(relig = fct_lump(relig)) %>%
count(relig)
count(relig)
# give n value to decide the total no. of groups after lump
gss_cat %>%
mutate(relig = fct_lump(relig, n = 10)) %>%
count(relig, sort = TRUE) %>%
print(n = Inf)
now()
library(tidyverse)
library(lubridate)
library(nycflights13)
now()
today()
ymd(20190507)
ymd('28 February,2019')
ymd('28st February,2019')
dmy('28st February,2019')
# For creating dates with time
ymd_hms(201907058000)
# For creating dates with time
ymd_hms(20190705 8000)
# For creating dates with time
ymd_hms(20190705 )
# For creating dates with time
ymd_hms(20190705)
# For creating dates with time
ymd_hms(20190705 20:11:00)
# For creating dates with time
ymd_hms('20190705 20:11:00')
ymd_hms('20190705 20:11')
ymd_hm('20190705 20:11')
ymd_hm('20190705 20:11:05')
ymd_hm('20190705 20:11')
?tz
tz()
?
?tz
?tz
ymd_hm('20190705 20:11',tz='UTC')
ymd_hm('20190705 20:11',tz='New_Delhi')
ymd_hm('20190705 20:11',tz='Mumbai')
ymd_hm('20190705 20:11',tz='Asia/Mumbai')
ymd_hm('20190705 20:11',tz='Asia/Delhi')
ymd_hm('20190705 20:11',tz='NZ')
ymd_hm('20190705 20:11',tz='IN')
ymd_hm('20190705 20:11',tz='IND')
ymd_hm('20190705 20:11',tz='IST')
base::Sys.timezone()
base::timezones()
ymd_hm('20190705 20:11',tz='Asia')
ymd_hm('20190705 20:11',tz='Asia/Calcutta')
ymd_hm('20190705 20:11',tz='Asia/Delhi')
ymd_hm('20190705 20:11',tz='Asia/New_Delhi')
ymd_hm('20190705 20:11',tz='Asia/Mumbai')
ymd_hm('20190705 20:11',tz='IN')
ymd_hm('20190705 20:11',tz='Asia/Kolkata')
base::timezones()
flights %>%
select(year, month, day, hour, minute)
fl=flights %>%
select(year, month, day, hour, minute)
fl %>% mutate(make_datetime())
fl %>% mutate(dep_time=make_datetime(f1))
fl %>% mutate(dep_time=make_datetime(.))
fl %>% mutate(dep_time=make_datetime(year,month,day,hour,minute))
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day, time %/% 100, time %% 100)
}
flights
flights_dt <- flights %>% select(!is.na(dep_time),!is.na(arr_time))
flights_dt <- flights %>% select(!is.na(dep_time),!is.na(arr_time))
flights_dt <- flights %>% filter(!is.na(dep_time),!is.na(arr_time))
flights_dt <- flights %>% filter(!is.na(dep_time),!is.na(arr_time)) %>%
mutate(dep_time=make_datetime_100(year,month,day,dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100( year, month, day, sched_arr_time)) %>%
select(origin,dest,ends_with('time'),ends_with('delay'))
flights_dt
flights_dt <- flights %>% filter(!is.na(dep_time),!is.na(arr_time)) %>%
mutate(dep_time=make_datetime_100(year,month,day,dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100( year, month, day, sched_arr_time)) %>%
select(origin,dest,ends_with('delay'),ends_with('time'))
flights_dt
ggplot(flights_dt,aes(dep_time)) %>%
geom_freqpoly(binwidth=86400) # 86400=no. of seconds in a day
ggplot(flights_dt,aes(dep_time)) +
geom_freqpoly(binwidth=86400) # 86400=no. of seconds in a day
ggplot(flights_dt,aes(dep_time)) +
geom_freqpoly(binwidth=365)
slights %>% filter(dep_time=ymd(20130728)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth=60)
fllights_dt %>% filter(dep_time=ymd(20130728)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth=60)
flights_dt %>% filter(dep_time=ymd(20130728)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth=60)
flights_dt %>% filter(dep_time==ymd(20130728)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth=60)
flights_dt %>% filter(dep_time==ymd(20130728)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth=600)
flights_dt %>% filter(dep_time==ymd(20130728))
flights_dt %>% filter(dep_time==ymd(20130718))
flights_dt
flights_dt %>% filter(dep_time==ymd(20130728))
flights_dt %>% filter(dep_time==ymd(20131109))
ymd(20131109)
flights_dt %>% filter(dep_time==ymd(20130507))
flights_dt %>% filter(dep_time<ymd(20130507))
flights_dt %>% filter(dep_time=ymd(20130728))
flights_dt %>% filter(dep_time==ymd(20130728))
flights_dt %>% filter(dep_time==ymd(20130101))
flights_dt %>% filter(between(ymd(20130728),ymd(20130729)))
flights_dt %>% filter(between(ymd(20130728),ymd(20130729),100))
flights_dt %>% filter(dep_time=starts_with(ymd(20130728)))
flights_dt %>% filter(dep_time==starts_with(ymd(20130728)))
flights_dt %>% filter(starts_with(ymd(20130728)))
flights_dt %>% filter(dep_time>(ymd(20130728)))
flights_dt %>% filter(dep_time>(ymd(20130728)& dep_time<ymd(20130729)))
flights_dt %>% filter(dep_time>(ymd(20130728) & dep_time<ymd(20130729)))
flights_dt %>% filter(dep_time>(ymd(20130728) && dep_time<ymd(20130729)))
flights_dt %>% filter(dep_time>(ymd(20130728) & dep_time<ymd(20130729)))
flights_dt %>% filter(dep_time>(ymd(20130728) %&% dep_time<ymd(20130729)))
flights_dt %>% filter(dep_time>(ymd(20130728)& dep_time<ymd(20130729)))
flights_dt %>% filter(dep_time(starts_with=ymd(20130728)))
flights_dt %>% filter(dep_time=starts_with=ymd(20130728))
flights_dt %>% filter(dep_time=starts_with(ymd(20130728)))
flights_dt %>% filter(dep_time==starts_with(ymd(20130728)))
flights_dt %>% filter(dep_time==ymd(20130728))
flights_dt %>% filter(dep_time>ymd(20130728) & dep_time<ymd(20130729))
flights_dt %>% filter(dep_time>ymd(20130728) & dep_time<ymd(20130729)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth=600)
as_datetime(today())
source('~/R/R_Data_Analysis/Date_Time.R')
source('~/R/R_Data_Analysis/Date_Time.R')
as_datetime(today())
as_date(now())
# Count from 1970
as_datetime(1)
# Count from 1970-0-01 00:00:00 UTC
as_datetime(60*60*24*5)
as_date(365*10+2)
datetime <- ymd_hms("2016-07-08 12:34:56")
year(datetime)
month(datetime)
mday(datetime)
yday(datetime)
wday(datetime)
month(datetime,labels=T)
month(datetime,labels=TRUE)
month(datetime,label=TRUE)
month(datetime,lbels=TRUE,attr=FALSE)
month(datetime,lbels=TRUE,abbr=FALSE)
month(datetime,labels=TRUE,abbr=FALSE)
month(datetime,label=TRUE,abbr=FALSE)
flights%>% mutate(wday=wday(dep_time,label=TRUE)) %>%
ggplot(aes(wday))+
geom_bar()
flights_dt %>% mutate(wday=wday(dep_time,label=TRUE)) %>%
ggplot(aes(x=wday))+
geom_bar()
flights_dt %>% mutate(minute = minute(dep_time)) %>%
group_by(minute) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE), n = n()) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
sched_dep <- flights_dt %>% mutate(minute = minute(sched_dep_time)) %>%
group_by(minute) %>% summarize(avg_delay = mean(arr_delay, na.rm = TRUE), n = n())
ggplot(sched_dep, aes(minute, avg_delay)) +
geom_line()
ggplot(sched_dep, aes(minute, n)) +
geom_line()
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(week, n)) +
geom_line()
floor_date(flights_dt,dep_time, "week")
flights_dt %>% floor_date(dep_time, "week")
flights_dt %>% floor_date(dep_time, "week")
flights_dt %>%
count(week = floor_date(dep_time, "week"))
# Each ceiling_date()function takes a vector of dates to adjust and then the name of t
# he unit to round down (floor), round up (ceiling), or round to.
flights_dt %>%
count(week = floor_date(dep_time, "week"))
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(week, n)) +
geom_line()
datetime <- ymd_hms("2016-07-08 12:34:56")
year(datetime) <- 2020
datetime
month(datetime) <- 01
datetime
hour(datetime) <- hour(datetime) + 1
update(datetime,year=2021,month=07,mday=28,hour=00)
ymd("2015-02-01") %>%
update(mday = 30)
ymd("2015-02-01") %>% update(hour = 400)
# Dep_time of flights on the 1st day of the year
flights_dt %>%
mutate(dep_hour = update(dep_time, yday = 1)) %>%
ggplot(aes(dep_hour)) +
geom_freqpoly(binwidth = 300)
# Calculating Durations
h_age <- today() - ymd(19791014)
h_age
as.duration(h_age)
dseconds(15)
dminutes(10)
dhours(c(12, 24))
ddays(0:5)
dweeks(3)
dyears(1)
2 * dyears(1)
dyears(1) + dweeks(12) + dhours(15)
tomorrow <- today() + ddays(1)
last_year <- today() - dyears(1)
one_pm <- ymd_hms(
"2016-03-12 13:00:00",
tz = "Asia/kolkata")
one_pm
one_pm + ddays(1)
one_pm <- ymd_hms(
"2016-03-12 13:00:00",
tz = "America/New_York")
one_pm
one_pm + ddays(1)
#bTo solve this use Periods
one_pm
one_pm + days(1)
seconds(15)
minutes(10)
hours(c(12, 24))
days(7)
months(1:6)
weeks(3)
years(1)
10 * (months(6) + days(1))
10 * (months(6) + days(1))
ymd("2016-01-01") + dyears(1)
ymd("2016-01-01") + years(1)
ymd("2016-01-01") + years(1)
one_pm + ddays(1)
one_pm + days(1)
flights_dt %>%
filter(arr_time < dep_time)
flights_dt %>%
filter(arr_time > dep_time)
<
flights_dt %>%
filter(arr_time < dep_time)
flights_dt <- flights_dt %>%
mutate(overnight = arr_time < dep_time,
arr_time = arr_time + days(overnight * 1),
sched_arr_time = sched_arr_time + days(overnight * 1))
sched_arr_time = sched_arr_time + days(overnight * 1)
flights_dt %>%
mutate(overnight = arr_time < dep_time,
arr_time = arr_time + days(overnight * 1),
sched_arr_time = sched_arr_time + days(overnight * 1))
flights_dt %>%
filter(overnight, arr_time < dep_time)
# intervals
years(1) / days(1)
next_year <- today() + years(1)
(today() %--% next_year) / ddays(1)
(today() %--% next_year) %/% days(1)
Sys.timezone()
length(OlsonNames())
head(OlsonNames())
OlsonNames()
(x1 <- ymd_hms("2015-06-01 12:00:00", tz = "America/New_York"))
(x2 <- ymd_hms("2015-06-01 18:00:00", tz = "Europe/Copenhagen"))
(x3 <- ymd_hms("2015-06-02 04:00:00", tz = "Pacific/Auckland"))
x1 - x2
x1 - x3
x4 <- c(x1, x2, x3)
x4
x4a <- with_tz(x4, tzone = "Australia/Lord_Howe")
x4a
x4a-x4
# force_tz() makes difference in different timezones
x4b <- force_tz(x4, tzone = "Australia/Lord_Howe")
x4b
x4b-x4
